name: Docker Deploy to EC2

on:
  push:
    branches:
      - prod   # prod 브랜치에 push 될 때만 실행

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Docker 권한 문제 해결
            sudo usermod -aG docker ubuntu
            sudo chmod 666 /var/run/docker.sock
            
            # 프로젝트 디렉토리 생성 및 이동
            sudo mkdir -p /opt/mercury-kis-open-trading-api
            sudo chown -R ubuntu:ubuntu /opt/mercury-kis-open-trading-api
            cd /opt/mercury-kis-open-trading-api
            
            # Git 저장소가 없으면 클론
            if [ ! -d ".git" ]; then
              echo "Git 저장소 클론 중..."
              git clone git@wwbrdle:wwbrdle/mercury-kis-open-trading-api.git .
              git checkout prod
            else
              echo "Git 저장소가 이미 존재합니다. 최신 코드 가져오기..."
              git fetch --all
              git reset --hard origin/prod
            fi
            
            # 디스크 공간 정리
            echo "디스크 공간 정리 중..."
            sudo docker system prune -a -f
            sudo docker image prune -a -f
            sudo docker volume prune -f
            sudo docker builder prune -a -f
            
            # 디스크 사용량 확인
            echo "디스크 사용량 확인:"
            df -h
            
            # 기존 컨테이너 상태 확인 (건드리지 않음)
            echo "기존 컨테이너 상태:"
            sudo docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
            
            # Docker 네트워크 확인 및 생성
            echo "Docker 네트워크 확인 중..."
            if ! sudo docker network ls | grep -q "mercury_mercury-network"; then
              echo "mercury_mercury-network 네트워크가 없습니다. 생성 중..."
              sudo docker network create mercury_mercury-network
            else
              echo "mercury_mercury-network 네트워크가 이미 존재합니다."
            fi
            
            # 우리 앱의 컨테이너 빌드 및 실행 (포트 8000에서)
            sudo docker compose up -d --build mercury-kis-open-trading-api
            
            # 컨테이너 상태 확인
            sudo docker compose ps
            
            # 컨테이너 실행 상태 검증
            echo "컨테이너 실행 상태 검증 중..."
            echo "현재 실행 중인 컨테이너 목록:"
            sudo docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}"
            
            if sudo docker ps --format "{{.Names}}" | grep -q "mercury-kis-open-trading-api"; then
              echo "✅ 컨테이너가 실행되었습니다. 애플리케이션 상태 확인 중..."
              
              # 애플리케이션 시작 대기 (최대 60초)
              echo "애플리케이션 시작 대기 중..."
              for i in {1..12}; do
                echo "시도 $i/12: heartbeat API 확인 중..."
                if curl -f -s http://localhost:8000/heartbeat > /dev/null 2>&1; then
                  echo "✅ 애플리케이션이 정상적으로 시작되었습니다!"
                  break
                else
                  echo "애플리케이션이 아직 준비되지 않았습니다. 5초 후 재시도..."
                  sleep 5
                fi
                
                if [ $i -eq 12 ]; then
                  echo "❌ 배포 실패: 애플리케이션이 60초 내에 시작되지 않았습니다."
                  echo "컨테이너 로그 확인:"
                  sudo docker compose logs --tail=50 mercury-kis-open-trading-api
                  exit 1
                fi
              done
              
              # 최종 heartbeat 확인
              echo "최종 heartbeat 확인 중..."
              heartbeat_response=$(curl -s http://localhost:8000/heartbeat)
              if echo "$heartbeat_response" | grep -q "heartbeat_ok"; then
                echo "✅ 배포 성공: mercury-kis-open-trading-api가 정상적으로 실행 중입니다."
                echo "컨테이너 정보:"
                sudo docker ps --format "table {{.Names}}\t{{.Ports}}\t{{.Status}}" | grep mercury-kis-open-trading-api
                echo "Heartbeat 응답:"
                echo "$heartbeat_response"
              else
                echo "❌ 배포 실패: heartbeat API가 정상적으로 응답하지 않습니다."
                echo "Heartbeat 응답:"
                echo "$heartbeat_response"
                echo "컨테이너 로그 확인:"
                sudo docker compose logs --tail=50 mercury-kis-open-trading-api
                exit 1
              fi
            else
              echo "❌ 배포 실패: mercury-kis-open-trading-api 컨테이너가 실행되지 않았습니다."
              echo "모든 컨테이너 상태:"
              sudo docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo "컨테이너 로그 확인:"
              sudo docker compose logs mercury-kis-open-trading-api
              exit 1
            fi
            
            # 로그 확인
            sudo docker compose logs --tail=50

